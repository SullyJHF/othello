name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          echo "Setting up test database for pre-deployment testing..."
          npm run db:setup:test
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: othello_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: othello_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password

      - name: Cleanup test database
        if: always()
        run: npm run db:stop:test

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build application
        run: npm run build
        env:
          VITE_VERSION: ${{ steps.package-version.outputs.version }}
          VITE_BUILD_HASH: ${{ github.sha }}
          VITE_BUILD_BRANCH: ${{ github.ref_name }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Navigate to project directory
            cd othello

            # Pull latest changes
            git fetch --all
            git reset --hard origin/main

            # Export build information
            export VITE_VERSION="${{ steps.package-version.outputs.version }}"
            export VITE_BUILD_HASH="${{ github.sha }}"
            export VITE_BUILD_BRANCH="${{ github.ref_name }}"
            export VITE_BUILD_TIME="${{ github.event.head_commit.timestamp }}"

            # Setup production database
            echo "Setting up production database..."
            npm run db:setup:prod

            # Deploy using deployment script
            ./deploy.sh deploy

            # Wait for containers to start
            sleep 10

            # Check if deployment was successful
            if docker ps --filter "name=othello" --filter "status=running" | grep -q othello; then
              echo "✅ Deployment successful - containers are running"
            else
              echo "❌ Deployment failed - containers not running"
              exit 1
            fi

            # Health check
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Health check passed"
            else
              echo "⚠️  Health check failed but deployment completed"
            fi

      - name: Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🚀 Deployment completed successfully!"
          else
            echo "💥 Deployment failed!"
          fi
