name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - visual
          - cross-browser
          - full

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '0'

jobs:
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Build application
      run: npm run build
      env:
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Start server
      run: |
        npm run serve &
        echo "SERVER_PID=$!" >> $GITHUB_ENV
      env:
        NODE_ENV: production

    - name: Wait for server
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
        PLAYWRIGHT_HEADLESS: 'true'
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results-${{ matrix.browser }}
        path: |
          tests/playwright/test-results/
          tests/playwright/screenshots/
        retention-days: 7

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 7

    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  visual-regression:
    if: github.event_name == 'pull_request' || github.event.inputs.test_type == 'visual' || github.event.inputs.test_type == 'full'
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build
      env:
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Start server
      run: |
        npm run serve &
        echo "SERVER_PID=$!" >> $GITHUB_ENV

    - name: Wait for server
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run visual regression tests
      run: npx playwright test --grep "visual-regression" --project=chromium
      env:
        PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
        PLAYWRIGHT_HEADLESS: 'true'
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Upload visual diff artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-diffs
        path: |
          tests/playwright/screenshots/diffs/
          tests/playwright/test-results/
        retention-days: 14

    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  performance:
    if: github.event.inputs.test_type == 'full'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application (optimized)
      run: npm run build
      env:
        NODE_ENV: production
        REACT_APP_DEBUG_ENABLED: 'false'

    - name: Start production server
      run: |
        npm run serve &
        echo "SERVER_PID=$!" >> $GITHUB_ENV

    - name: Wait for server
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run performance tests
      run: |
        # Custom performance testing script
        node scripts/playwright-dev.js test --grep "performance"
      env:
        PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
        PLAYWRIGHT_HEADLESS: 'true'

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: tests/playwright/reports/
        retention-days: 7

    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  mobile-testing:
    if: github.event.inputs.test_type == 'full'
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build
      env:
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Start server
      run: |
        npm run serve &
        echo "SERVER_PID=$!" >> $GITHUB_ENV

    - name: Wait for server
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run mobile tests
      run: npx playwright test --project=mobile-chrome --project=mobile-safari
      env:
        PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
        PLAYWRIGHT_HEADLESS: 'true'
        REACT_APP_DEBUG_ENABLED: 'true'

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: |
          tests/playwright/test-results/
          tests/playwright/screenshots/
        retention-days: 7

    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  # Combine and report results
  report:
    if: always()
    needs: [test, visual-regression]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate combined report
      run: |
        # Merge all test results
        mkdir -p combined-results
        find artifacts/ -name "*.json" -path "*/test-results/*" -exec cp {} combined-results/ \;
        
        # Generate HTML report if results exist
        if [ "$(ls -A combined-results/)" ]; then
          npx playwright merge-reports --reporter html combined-results/
        fi

    - name: Upload combined report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: combined-playwright-report
        path: playwright-report/
        retention-days: 14

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if artifacts exist
          const artifactsDir = 'artifacts';
          let hasFailures = false;
          let testSummary = '## 🎭 Playwright Test Results\n\n';
          
          if (fs.existsSync(artifactsDir)) {
            const browsers = ['chromium', 'firefox', 'webkit'];
            
            for (const browser of browsers) {
              const reportPath = path.join(artifactsDir, `playwright-report-${browser}`);
              if (fs.existsSync(reportPath)) {
                testSummary += `✅ ${browser}: Tests completed\n`;
              } else {
                testSummary += `❌ ${browser}: Tests failed or incomplete\n`;
                hasFailures = true;
              }
            }
            
            if (fs.existsSync(path.join(artifactsDir, 'visual-regression-diffs'))) {
              testSummary += '\n⚠️ Visual regression differences detected\n';
              hasFailures = true;
            }
          } else {
            testSummary += '❓ No test artifacts found\n';
          }
          
          testSummary += '\n📊 [View detailed report in Actions artifacts]';
          
          // Find existing comment and update or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🎭 Playwright Test Results')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: testSummary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: testSummary
            });
          }